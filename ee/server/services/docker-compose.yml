version: '3.1'

services:
  authorization-service:
    container_name: authorization-service
    build:
      context: .
      args:
        SERVICE: Authorization
    # image: registry.rocket.chat/microservices_authorization-service:latest
    env_file: .config/services/service.env
    depends_on:
      - nats

  account-service:
    container_name: account-service
    build:
      context: .
      args:
        SERVICE: Account
    # image: registry.rocket.chat/microservices_accounts-service:latest
    env_file: .config/services/service.env
    depends_on:
      - nats

  presence-service:
    container_name: presence-service
    build:
      context: .
      args:
        SERVICE: Presence
    # image: registry.rocket.chat/microservices_presence-service:latest
    env_file: .config/services/service.env
    depends_on:
      - nats

  ddp-streamer-service:
    container_name: ddp-streamer-service
    build:
      context: .
      args:
        SERVICE: DDPStreamer
    # image: registry.rocket.chat/microservices_ddp-streamer:latest
    env_file: .config/services/service.env
    depends_on:
      - nats
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.backend=ddp-streamer-service"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:${HOST_NAME}"

  stream-hub-service:
    container_name: stream-hub-service
    build:
      context: .
      args:
        SERVICE: StreamHub
    # image: registry.rocket.chat/microservices_mongodb-stream-hub:latest
    env_file: .config/services/service.env
    depends_on:
      - nats

  nats:
    image: nats
    ports:
      - "4222:4222"

  # tracing container for all tracing reporting
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    depends_on:
      - traefik
    # environment:
    #   - QUERY_BASE_PATH=/jaeger
    labels:
      - "traefik.enable=true"
      - "traefik.jaeger.frontend=jaeger"
      - "traefik.jaeger.port=16686"
      - 'traefik.jaeger.frontend.rule=Host:jaeger.${HOST_NAME}'

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./.config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./.config/grafana/provisioning/dashboards/provider:/etc/grafana/provisioning/dashboards:ro
      - ./.config/grafana/provisioning/dashboards/json-exports:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.port=3000"
      - "traefik.frontend.rule=Host:grafana.${HOST_NAME}"
      # - 'traefik.frontend.redirect.entryPoint=https'

  prometheus:
    image: quay.io/prometheus/prometheus
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - '--storage.tsdb.retention.time=12w'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./.config/data/prometheus:/prometheus
      - ./.config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - traefik
    ports:
      - 9090:9090
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:prometheus.${HOST_NAME}"
      - "traefik.port=9090"
      # - 'traefik.frontend.redirect.entryPoint=https'

  traefik:
    image: traefik:alpine
    container_name: traefik
    command:
      - --configFile=/traefik.toml
      - --web
      - --logLevel=INFO
    ports:
      - "80:80"
      # - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.config/traefik/traefik.toml:/traefik.toml
      # - ./.config/traefik/acme.json:/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:traefik.${HOST_NAME}"
      - "traefik.port=8080"

  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    volumes:
      # -/:/rootfs:ro
      # -/var/run:/var/run:ro
      # -/sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      # -/dev/disk/:/dev/disk:ro
    ports:
      - 8080:8080
    # --privileged \
    # --device=/dev/kmsg \
