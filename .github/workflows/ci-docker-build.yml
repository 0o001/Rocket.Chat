name: Docker Image Build

on:
  workflow_call:
    inputs:
      release:
        required: true
        type: string
      lowercase-repo:
        required: true
        type: string
      rc-dockerfile:
        required: true
        type: string
      rc-docker-tag:
        required: true
        type: string
      rc-dockerfile-alpine:
        required: true
        type: string
      rc-docker-tag-alpine:
        required: true
        type: string
      gh-docker-tag:
        required: true
        type: string

env:
  LOWERCASE_REPOSITORY: ${{ inputs.lowercase-repo }}
  DOCKER_TAG: ${{ inputs.gh-docker-tag }}

jobs:
  build-image:
    runs-on: ubuntu-20.04
    env:
      RC_DOCKERFILE: ${{ matrix.type == 'alpine' && inputs.rc-dockerfile-alpine || inputs.rc-dockerfile }}
      RC_DOCKER_TAG: ${{ matrix.type == 'alpine' && inputs.rc-docker-tag-alpine || inputs.rc-docker-tag }}

    strategy:
      matrix:
        type: ['official', 'alpine']

    name: Building Image ${{ matrix.type }}

    steps:
      - uses: actions/checkout@v3

      # - name: Setup NodeJS
      #   uses: ./.github/actions/setup-node
      #   with:
      #     node-version: ${{ inputs.node-version }}
      #     cache-modules: true
      #     install: true

      # - uses: dtinth/setup-github-actions-caching-for-turbo@v1

      # - name: yarn build
      #   run: yarn build

      - name: Free disk space
        run: |
          docker image ls -a
          docker rmi $(docker image ls -aq)
          docker image ls -a

      - name: Restore build
        uses: actions/download-artifact@v3
        with:
          name: build
          path: /tmp/build

      - name: Unpack build
        run: |
          cd /tmp/build
          tar xzf Rocket.Chat.tar.gz
          rm Rocket.Chat.tar.gz

      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: docker-layer-caching-${{ github.workflow }}-${{ matrix.type }}-{hash}
          restore-keys: |
            docker-layer-caching-${{ github.workflow }}-${{ matrix.type }}-

      - name: Start containers
        if: inputs.release == 'ce'
        run: |
          docker compose -f docker-compose-ci.yml build rocketchat
          docker image ls -a

      # - name: Upload image
      #   if: inputs.release == 'ce'
      #   uses: ishworkh/docker-image-artifact-upload@v1
      #   with:
      #     image: "ghcr.io/${{ inputs.lowercase-repo }}/rocket.chat:${{ inputs.gh-docker-tag }}.${{matrix.type}}"

      # - name: Start containers
      #   if: inputs.release == 'ee'
      #   run: |
      #     docker compose -f docker-compose-ci.yml build

      # - name: Login to GitHub Container Registry
      #   if: inputs.publish-container == true && (github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'release' || github.ref == 'refs/heads/develop')
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ secrets.CR_USER }}
      #     password: ${{ secrets.CR_PAT }}

      # - name: Publish Docker images to GitHub Container Registry
      #   if: inputs.publish-container == true && (github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'release' || github.ref == 'refs/heads/develop')
      #   run: |
      #     docker compose -f docker-compose-ci.yml push rocketchat

      #     if [[ '${{ matrix.mongodb-version }}' = '4.4' ]]; then
      #       IMAGE_NAME_BASE="ghcr.io/${LOWERCASE_REPOSITORY}/rocket.chat:${{ inputs.gh-docker-tag }}"

      #       echo "Push Docker image: ${IMAGE_NAME_BASE}"

      #       docker tag ${IMAGE_NAME_BASE}.official $IMAGE_NAME_BASE
      #       docker push $IMAGE_NAME_BASE
      #     fi;

      # - name: Publish Docker images (services) to GitHub Container Registry
      #   if: inputs.publish-container == true && inputs.release == 'ee' && (github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'release' || github.ref == 'refs/heads/develop')
      #   run: |
      #     docker compose -f docker-compose-ci.yml push \
      #       authorization-service \
      #       account-service \
      #       ddp-streamer-service \
      #       presence-service \
      #       stream-hub-service
